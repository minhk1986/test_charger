{"remainingRequest":"/home/robotics/AnhNV/agv-dasboard/node_modules/babel-loader/lib/index.js!/home/robotics/AnhNV/agv-dasboard/node_modules/eslint-loader/index.js??ref--13-0!/home/robotics/AnhNV/agv-dasboard/src/services/agvr/agvr-robot.js","dependencies":[{"path":"/home/robotics/AnhNV/agv-dasboard/src/services/agvr/agvr-robot.js","mtime":1609217631890},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/cache-loader/dist/cjs.js","mtime":1602053610278},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/babel-loader/lib/index.js","mtime":1602053610019},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/eslint-loader/index.js","mtime":1602053618906}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMud2Vhay1tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvcm9ib3RpY3MvQW5oTlYvYWd2LWRhc2JvYXJkL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9yb2JvdGljcy9BbmhOVi9hZ3YtZGFzYm9hcmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvaG9tZS9yb2JvdGljcy9BbmhOVi9hZ3YtZGFzYm9hcmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9jbGFzc1ByaXZhdGVGaWVsZEdldCBmcm9tICIvaG9tZS9yb2JvdGljcy9BbmhOVi9hZ3YtZGFzYm9hcmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzUHJpdmF0ZUZpZWxkR2V0IjsKaW1wb3J0IF9jbGFzc1ByaXZhdGVGaWVsZFNldCBmcm9tICIvaG9tZS9yb2JvdGljcy9BbmhOVi9hZ3YtZGFzYm9hcmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzUHJpdmF0ZUZpZWxkU2V0IjsKaW1wb3J0IFJPU0xJQiBmcm9tICJyb3NsaWIiOwppbXBvcnQgVnVlIGZyb20gInZ1ZSI7CmltcG9ydCBBZ3ZyRGlhZ25vc3RpY3MgZnJvbSAiLi9hZ3ZyLWRpYWdub3N0aWNzIjsKaW1wb3J0IEFndnJBY3Rpb24gZnJvbSAiLi9hZ3ZyLWFjdGlvbiI7CmltcG9ydCBBZ3ZyU2ltMTAwMFBvc2UgZnJvbSAiLi9hZ3ZyLXNpbTEwMDAtcG9zZSI7CmltcG9ydCB7IFJPUzJEIH0gZnJvbSAnQC91dGlscy9yb3MnOwppbXBvcnQgKiBhcyBBR1ZfQUNUSU9OX1NUQVRVUyBmcm9tICcuL2Fndi1hY3Rpb24tc3RhdHVzJzsKaW1wb3J0ICogYXMgQUdWX0FDVElPTiBmcm9tICIuL2Fndi1hY3Rpb24tdHlwZSI7Cgp2YXIgX2lkID0gbmV3IFdlYWtNYXAoKTsKCnZhciBfYWd2ID0gbmV3IFdlYWtNYXAoKTsKCnZhciBfbWFwSWQgPSBuZXcgV2Vha01hcCgpOwoKdmFyIF9tYXAgPSBuZXcgV2Vha01hcCgpOwoKdmFyIF9yb3MgPSBuZXcgV2Vha01hcCgpOwoKdmFyIF9yb3NVcmwgPSBuZXcgV2Vha01hcCgpOwoKdmFyIF9yb3NTdG9yZSA9IG5ldyBXZWFrTWFwKCk7Cgp2YXIgX2FndnJEaWFnbm9zdGljcyA9IG5ldyBXZWFrTWFwKCk7Cgp2YXIgX2FndnJBY3Rpb24gPSBuZXcgV2Vha01hcCgpOwoKdmFyIF9hZ3ZyU2ltMTAwMFBvc2UgPSBuZXcgV2Vha01hcCgpOwoKdmFyIF90d2lzdENtZFZlbCA9IG5ldyBXZWFrTWFwKCk7Cgp2YXIgX3RpbWVyUHVibGlzaENtZFZlbCA9IG5ldyBXZWFrTWFwKCk7Cgp2YXIgX2ludGVydmFsUHVzaCA9IG5ldyBXZWFrTWFwKCk7Cgp2YXIgX3Jvc0Nvbm5lY3QgPSBuZXcgV2Vha01hcCgpOwoKdmFyIF9vblJvc0Nvbm5lY3RlZCA9IG5ldyBXZWFrTWFwKCk7Cgp2YXIgX29uUm9zRGlzY29ubmVjdGVkID0gbmV3IFdlYWtNYXAoKTsKCnZhciBBZ3ZyUm9ib3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEFndnJSb2JvdChpZCwgbWFwSWQpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFndnJSb2JvdCk7CgogICAgX2lkLnNldCh0aGlzLCB7CiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICB2YWx1ZTogbnVsbAogICAgfSk7CgogICAgX2Fndi5zZXQodGhpcywgewogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgdmFsdWU6IG51bGwKICAgIH0pOwoKICAgIF9tYXBJZC5zZXQodGhpcywgewogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgdmFsdWU6IG51bGwKICAgIH0pOwoKICAgIF9tYXAuc2V0KHRoaXMsIHsKICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgIHZhbHVlOiBudWxsCiAgICB9KTsKCiAgICBfcm9zLnNldCh0aGlzLCB7CiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICB2YWx1ZTogbnVsbAogICAgfSk7CgogICAgX3Jvc1VybC5zZXQodGhpcywgewogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgdmFsdWU6IG51bGwKICAgIH0pOwoKICAgIF9yb3NTdG9yZS5zZXQodGhpcywgewogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgdmFsdWU6IG51bGwKICAgIH0pOwoKICAgIF9hZ3ZyRGlhZ25vc3RpY3Muc2V0KHRoaXMsIHsKICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgIHZhbHVlOiBudWxsCiAgICB9KTsKCiAgICBfYWd2ckFjdGlvbi5zZXQodGhpcywgewogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgdmFsdWU6IG51bGwKICAgIH0pOwoKICAgIF9hZ3ZyU2ltMTAwMFBvc2Uuc2V0KHRoaXMsIHsKICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgIHZhbHVlOiBudWxsCiAgICB9KTsKCiAgICBfdHdpc3RDbWRWZWwuc2V0KHRoaXMsIHsKICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgIHZhbHVlOiBudWxsCiAgICB9KTsKCiAgICBfdGltZXJQdWJsaXNoQ21kVmVsLnNldCh0aGlzLCB7CiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICB2YWx1ZTogbnVsbAogICAgfSk7CgogICAgX2ludGVydmFsUHVzaC5zZXQodGhpcywgewogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgdmFsdWU6IDEwMAogICAgfSk7CgogICAgX3Jvc0Nvbm5lY3Quc2V0KHRoaXMsIHsKICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHsKICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRTZXQoX3RoaXMsIF9yb3MsIG5ldyBST1NMSUIuUm9zKHsKICAgICAgICAgIHVybDogX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KF90aGlzLCBfcm9zVXJsKQogICAgICAgIH0pKTsKCiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KF90aGlzLCBfcm9zKS5vbigiY29ubmVjdGlvbiIsIF9jbGFzc1ByaXZhdGVGaWVsZEdldChfdGhpcywgX29uUm9zQ29ubmVjdGVkKSk7CgogICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZEdldChfdGhpcywgX3Jvcykub24oImNsb3NlIiwgX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KF90aGlzLCBfb25Sb3NEaXNjb25uZWN0ZWQpKTsKCiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KF90aGlzLCBfcm9zKS5vbigiZXJyb3IiLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCJBR1ZSIGVycm9yOiAiLCBlKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CgogICAgX29uUm9zQ29ubmVjdGVkLnNldCh0aGlzLCB7CiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7CiAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KF90aGlzLCBfYWd2ckFjdGlvbiwgbmV3IEFndnJBY3Rpb24oX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KF90aGlzLCBfcm9zKSkpOwoKICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRTZXQoX3RoaXMsIF9hZ3ZyRGlhZ25vc3RpY3MsIG5ldyBBZ3ZyRGlhZ25vc3RpY3MoX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KF90aGlzLCBfcm9zKSwgX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KF90aGlzLCBfaWQpKSk7CgogICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZFNldChfdGhpcywgX2FndnJTaW0xMDAwUG9zZSwgbmV3IEFndnJTaW0xMDAwUG9zZShfY2xhc3NQcml2YXRlRmllbGRHZXQoX3RoaXMsIF9yb3MpLCBfY2xhc3NQcml2YXRlRmllbGRHZXQoX3RoaXMsIF9pZCksIF9jbGFzc1ByaXZhdGVGaWVsZEdldChfdGhpcywgX21hcElkKSkpOwoKICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRHZXQoX3RoaXMsIF9yb3NTdG9yZSkuY29tbWl0KCJhZ3ZzL3NldENvbm5lY3Rpb25TdGF0ZSIsIHsKICAgICAgICAgIGFndklkOiBfY2xhc3NQcml2YXRlRmllbGRHZXQoX3RoaXMsIF9pZCksCiAgICAgICAgICBpc0Nvbm5lY3RlZDogdHJ1ZQogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKCiAgICBfb25Sb3NEaXNjb25uZWN0ZWQuc2V0KHRoaXMsIHsKICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHsKICAgICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KF90aGlzLCBfYWd2ckRpYWdub3N0aWNzKSAhPSBudWxsKSB7CiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRHZXQoX3RoaXMsIF9hZ3ZyRGlhZ25vc3RpY3MpLmRpc3Bvc2UoKTsKCiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRTZXQoX3RoaXMsIF9hZ3ZyRGlhZ25vc3RpY3MsIG51bGwpOwogICAgICAgIH0KCiAgICAgICAgaWYgKF9jbGFzc1ByaXZhdGVGaWVsZEdldChfdGhpcywgX2FndnJBY3Rpb24pICE9IG51bGwpIHsKICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZEdldChfdGhpcywgX2FndnJBY3Rpb24pLmRpc3Bvc2UoKTsKCiAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRTZXQoX3RoaXMsIF9hZ3ZyQWN0aW9uLCBudWxsKTsKICAgICAgICB9CgogICAgICAgIGlmIChfY2xhc3NQcml2YXRlRmllbGRHZXQoX3RoaXMsIF9hZ3ZyU2ltMTAwMFBvc2UpICE9IG51bGwpIHsKICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZEdldChfdGhpcywgX2FndnJTaW0xMDAwUG9zZSkuZGlzcG9zZSgpOwoKICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZFNldChfdGhpcywgX2FndnJTaW0xMDAwUG9zZSwgbnVsbCk7CiAgICAgICAgfQoKICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRHZXQoX3RoaXMsIF9yb3NTdG9yZSkuY29tbWl0KCJhZ3ZzL3NldENvbm5lY3Rpb25TdGF0ZSIsIHsKICAgICAgICAgIGFndklkOiBfY2xhc3NQcml2YXRlRmllbGRHZXQoX3RoaXMsIF9pZCksCiAgICAgICAgICBpc0Nvbm5lY3RlZDogZmFsc2UKICAgICAgICB9KTsKCiAgICAgICAgc2V0VGltZW91dChfY2xhc3NQcml2YXRlRmllbGRHZXQoX3RoaXMsIF9yb3NDb25uZWN0KSwgMzAwMCk7CiAgICAgIH0KICAgIH0pOwoKICAgIF9jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfaWQsIGlkKTsKCiAgICBfY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX21hcElkLCBtYXBJZCk7CgogICAgX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9yb3NTdG9yZSwgVnVlLnByb3RvdHlwZS4kc3RvcmUpOwoKICAgIF9jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfbWFwLCBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX3Jvc1N0b3JlKS5zdGF0ZS5hZ3ZNYXBzLmZpbmQoZnVuY3Rpb24gKG0pIHsKICAgICAgcmV0dXJuIG0uaWQgPT09IG1hcElkOwogICAgfSkpOwoKICAgIF9jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfYWd2LCBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX3Jvc1N0b3JlKS5zdGF0ZS5hZ3ZzLmZpbmQoZnVuY3Rpb24gKHIpIHsKICAgICAgcmV0dXJuIHIuaWQgPT09IF9jbGFzc1ByaXZhdGVGaWVsZEdldChfdGhpcywgX2lkKTsKICAgIH0pKTsKCiAgICBfY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX3Jvc1VybCwgX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9hZ3YpLnJvc01hc3RlclVyaSk7CgogICAgX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9yb3NDb25uZWN0KS5jYWxsKHRoaXMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEFndnJSb2JvdCwgW3sKICAgIGtleTogInB1c2hDbWR2ZWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9wdXNoQ21kdmVsID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMih0d2lzdCkgewogICAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgICB2YXIgc3BlZWQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghKHR3aXN0ID09IG51bGwpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBzcGVlZCA9IF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfYWd2KS5wcm9wZXJ0aWVzOwoKICAgICAgICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfdHdpc3RDbWRWZWwsIHsKICAgICAgICAgICAgICAgICAgbGluZWFyOiB7CiAgICAgICAgICAgICAgICAgICAgeDogdHdpc3QubGluZWFyLnggKiBzcGVlZC5tb3ZlbWVudFNwZWVkLngsCiAgICAgICAgICAgICAgICAgICAgeTogdHdpc3QubGluZWFyLnkgKiBzcGVlZC5tb3ZlbWVudFNwZWVkLnksCiAgICAgICAgICAgICAgICAgICAgejogdHdpc3QubGluZWFyLnogKiBzcGVlZC5tb3ZlbWVudFNwZWVkLnoKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgYW5ndWxhcjogewogICAgICAgICAgICAgICAgICAgIHg6IHR3aXN0LmFuZ3VsYXIueCAqIHNwZWVkLnJvdGF0ZVNwZWVkLngsCiAgICAgICAgICAgICAgICAgICAgeTogdHdpc3QuYW5ndWxhci55ICogc3BlZWQucm90YXRlU3BlZWQueSwKICAgICAgICAgICAgICAgICAgICB6OiB0d2lzdC5hbmd1bGFyLnogKiBzcGVlZC5yb3RhdGVTcGVlZC56CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGlmIChfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX3RpbWVyUHVibGlzaENtZFZlbCkgIT0gbnVsbCkgY2xlYXJJbnRlcnZhbChfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX3RpbWVyUHVibGlzaENtZFZlbCkpOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVzaEFjdGlvbih7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBBR1ZfQUNUSU9OLk1BTlVBTCwKICAgICAgICAgICAgICAgICAgdHlwZTogImdlb21ldHJ5X21zZ3MvVHdpc3QiLAogICAgICAgICAgICAgICAgICBkYXRhOiBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX3R3aXN0Q21kVmVsKQogICAgICAgICAgICAgICAgfSwgZmFsc2UpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBpZiAoX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF90d2lzdENtZFZlbCkubGluZWFyLnggIT0gMCB8fCBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX3R3aXN0Q21kVmVsKS5hbmd1bGFyLnogIT0gMCkgewogICAgICAgICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX3RpbWVyUHVibGlzaENtZFZlbCwgc2V0SW50ZXJ2YWwoIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KF90aGlzMiwgX2FndnJBY3Rpb24pID09IG51bGwgfHwgX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KF90aGlzMiwgX3R3aXN0Q21kVmVsKSA9PSBudWxsKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVGaWVsZEdldChfdGhpczIsIF9hZ3ZyQWN0aW9uKS5wdXNoQWN0aW9uKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IEFHVl9BQ1RJT04uTUFOVUFMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiZ2VvbWV0cnlfbXNncy9Ud2lzdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IF9jbGFzc1ByaXZhdGVGaWVsZEdldChfdGhpczIsIF90d2lzdENtZFZlbCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZhbHNlKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgICAgICAgICAgICAgIH0pKSwgX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9pbnRlcnZhbFB1c2gpKSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHB1c2hDbWR2ZWwoX3gpIHsKICAgICAgICByZXR1cm4gX3B1c2hDbWR2ZWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHB1c2hDbWR2ZWw7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJpbml0aWFsaXplUG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZVBvc2UoKSB7CiAgICAgIHZhciBhZ3ZQb3NlID0gX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9hZ3YpLndlYlBvc2U7CgogICAgICB0aGlzLnB1c2hBY3Rpb24oewogICAgICAgIHZhbHVlOiBBR1ZfQUNUSU9OLklOSVRJQUxfUE9TRSwKICAgICAgICB0eXBlOiAiZ2VvbWV0cnlfbXNncy9Qb3NlU3RhbXBlZCIsCiAgICAgICAgZGF0YTogewogICAgICAgICAgaGVhZGVyOiB7CiAgICAgICAgICAgIHNlcTogMCwKICAgICAgICAgICAgc3RhbXA6IHsKICAgICAgICAgICAgICBzZWM6IDAsCiAgICAgICAgICAgICAgbnNlYzogMAogICAgICAgICAgICB9LAogICAgICAgICAgICBmcmFtZV9pZDogJycKICAgICAgICAgIH0sCiAgICAgICAgICBwb3NlOiB7CiAgICAgICAgICAgIHBvc2l0aW9uOiB7CiAgICAgICAgICAgICAgeDogX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9tYXApLnJvc01hcC5pbmZvLm9yaWdpbi5wb3NpdGlvbi54ICsgYWd2UG9zZS5wb3NpdGlvbi54ICogX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9tYXApLnJvc01hcC5pbmZvLnJlc29sdXRpb24gLyBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX21hcCkud2ViTWFwLnNjYWxlLAogICAgICAgICAgICAgIHk6IF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfbWFwKS5yb3NNYXAuaW5mby5vcmlnaW4ucG9zaXRpb24ueSAtIChhZ3ZQb3NlLnBvc2l0aW9uLnkgLyBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX21hcCkud2ViTWFwLnNjYWxlIC0gX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9tYXApLnJvc01hcC5pbmZvLmhlaWdodCkgKiBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX21hcCkucm9zTWFwLmluZm8ucmVzb2x1dGlvbiwKICAgICAgICAgICAgICB6OiAwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9yaWVudGF0aW9uOiBST1MyRC5nbG9iYWxUaGV0YVRvUXVhdGVybmlvbihhZ3ZQb3NlLm9yaWVudGF0aW9uLnogKiBNYXRoLlBJIC8gMTgwKQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicHVzaEFjdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3B1c2hBY3Rpb24gPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKGFjdGlvbikgewogICAgICAgIHZhciB3YWl0UmVzdWx0LAogICAgICAgICAgICBfYXJnczMgPSBhcmd1bWVudHM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHdhaXRSZXN1bHQgPSBfYXJnczMubGVuZ3RoID4gMSAmJiBfYXJnczNbMV0gIT09IHVuZGVmaW5lZCA/IF9hcmdzM1sxXSA6IHRydWU7CgogICAgICAgICAgICAgICAgaWYgKCEoX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9hZ3ZyQWN0aW9uKSA9PSBudWxsKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBudWxsKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgaWYgKHdhaXRSZXN1bHQpIGNvbnNvbGUubG9nKCdwdXNoIGFjdGlvbiAnLCBhY3Rpb24pOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfYWd2ckFjdGlvbikucHVzaEFjdGlvbihhY3Rpb24sIHdhaXRSZXN1bHQpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQzLnNlbnQpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBwdXNoQWN0aW9uKF94MikgewogICAgICAgIHJldHVybiBfcHVzaEFjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gcHVzaEFjdGlvbjsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImxpZnRVcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2xpZnRVcCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2hBY3Rpb24oewogICAgICAgICAgICAgICAgICB2YWx1ZTogQUdWX0FDVElPTi5MSUZUX1VQLAogICAgICAgICAgICAgICAgICB0eXBlOiAiZ2VvbWV0cnlfbXNncy9Ud2lzdCIsCiAgICAgICAgICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgICAgICAgICBsaW5lYXI6IHsKICAgICAgICAgICAgICAgICAgICAgIHg6IDAsCiAgICAgICAgICAgICAgICAgICAgICB5OiAwLAogICAgICAgICAgICAgICAgICAgICAgejogMAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYW5ndWxhcjogewogICAgICAgICAgICAgICAgICAgICAgeDogMCwKICAgICAgICAgICAgICAgICAgICAgIHk6IDAsCiAgICAgICAgICAgICAgICAgICAgICB6OiAwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gbGlmdFVwKCkgewogICAgICAgIHJldHVybiBfbGlmdFVwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBsaWZ0VXA7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJsaWZ0RG93biIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2xpZnREb3duID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVzaEFjdGlvbih7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBBR1ZfQUNUSU9OLkxJRlRfRE9XTiwKICAgICAgICAgICAgICAgICAgdHlwZTogImdlb21ldHJ5X21zZ3MvVHdpc3QiLAogICAgICAgICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICAgICAgbGluZWFyOiB7CiAgICAgICAgICAgICAgICAgICAgICB4OiAwLAogICAgICAgICAgICAgICAgICAgICAgeTogMCwKICAgICAgICAgICAgICAgICAgICAgIHo6IDAKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGFuZ3VsYXI6IHsKICAgICAgICAgICAgICAgICAgICAgIHg6IDAsCiAgICAgICAgICAgICAgICAgICAgICB5OiAwLAogICAgICAgICAgICAgICAgICAgICAgejogMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGxpZnREb3duKCkgewogICAgICAgIHJldHVybiBfbGlmdERvd24uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGxpZnREb3duOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiY2hhcmdpbmdTdGFydCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2NoYXJnaW5nU3RhcnQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoQWN0aW9uKHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IEFHVl9BQ1RJT04uQ0hBUkdJTkdfSU4sCiAgICAgICAgICAgICAgICAgIHR5cGU6ICJnZW9tZXRyeV9tc2dzL1R3aXN0IiwKICAgICAgICAgICAgICAgICAgZGF0YTogewogICAgICAgICAgICAgICAgICAgIGxpbmVhcjogewogICAgICAgICAgICAgICAgICAgICAgeDogMCwKICAgICAgICAgICAgICAgICAgICAgIHk6IDAsCiAgICAgICAgICAgICAgICAgICAgICB6OiAwCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBhbmd1bGFyOiB7CiAgICAgICAgICAgICAgICAgICAgICB4OiAwLAogICAgICAgICAgICAgICAgICAgICAgeTogMCwKICAgICAgICAgICAgICAgICAgICAgIHo6IDAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBjaGFyZ2luZ1N0YXJ0KCkgewogICAgICAgIHJldHVybiBfY2hhcmdpbmdTdGFydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gY2hhcmdpbmdTdGFydDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImNoYXJnaW5nRW5kIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfY2hhcmdpbmdFbmQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KCkgewogICAgICAgIHZhciBhZ3ZQb3NlLCBhZ3ZBbmdsZSwgcG9zZVJvdGF0ZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDcucHJldiA9IF9jb250ZXh0Ny5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgYWd2UG9zZSA9IF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfYWd2KS5zaW0xMDAwUG9zZTsKICAgICAgICAgICAgICAgIGFndkFuZ2xlID0gYWd2UG9zZS5wb3NleWF3ICogTWF0aC5QSSAvIDE4MDAwMDsKICAgICAgICAgICAgICAgIHBvc2VSb3RhdGUgPSB7CiAgICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uOiBST1MyRC5nbG9iYWxUaGV0YVRvUXVhdGVybmlvbihhZ3ZBbmdsZSksCiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7CiAgICAgICAgICAgICAgICAgICAgeDogKGFndlBvc2UucG9zZXggKyAyMDAwICogTWF0aC5jb3MoYWd2QW5nbGUpKSAvIDEwMDAsCiAgICAgICAgICAgICAgICAgICAgeTogKGFndlBvc2UucG9zZXkgKyAyMDAwICogTWF0aC5zaW4oYWd2QW5nbGUpKSAvIDEwMDAsCiAgICAgICAgICAgICAgICAgICAgejogMAogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVzaEFjdGlvbih7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBBR1ZfQUNUSU9OLkNIQVJHSU5HX09VVCwKICAgICAgICAgICAgICAgICAgdHlwZTogImdlb21ldHJ5X21zZ3MvUG9zZVN0YW1wZWQiLAogICAgICAgICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiB7CiAgICAgICAgICAgICAgICAgICAgICBzZXE6IDAsCiAgICAgICAgICAgICAgICAgICAgICBzdGFtcDogewogICAgICAgICAgICAgICAgICAgICAgICBzZWM6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIG5zZWM6IDAKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBmcmFtZV9pZDogJ21hcCcKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHBvc2U6IHBvc2VSb3RhdGUKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjaGFyZ2luZ0VuZCcpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTcsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBjaGFyZ2luZ0VuZCgpIHsKICAgICAgICByZXR1cm4gX2NoYXJnaW5nRW5kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjaGFyZ2luZ0VuZDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImxpZnRJbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2xpZnRJbiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTgoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU4JChfY29udGV4dDgpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2hBY3Rpb24oewogICAgICAgICAgICAgICAgICB2YWx1ZTogQUdWX0FDVElPTi5MSUZUX0lOLAogICAgICAgICAgICAgICAgICB0eXBlOiAiZ2VvbWV0cnlfbXNncy9Ud2lzdCIsCiAgICAgICAgICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgICAgICAgICBsaW5lYXI6IHsKICAgICAgICAgICAgICAgICAgICAgIHg6IDAsCiAgICAgICAgICAgICAgICAgICAgICB5OiAwLAogICAgICAgICAgICAgICAgICAgICAgejogMAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYW5ndWxhcjogewogICAgICAgICAgICAgICAgICAgICAgeDogMCwKICAgICAgICAgICAgICAgICAgICAgIHk6IDAsCiAgICAgICAgICAgICAgICAgICAgICB6OiAwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU4LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gbGlmdEluKCkgewogICAgICAgIHJldHVybiBfbGlmdEluLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBsaWZ0SW47CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJsaWZ0T3V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfbGlmdE91dCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTkoKSB7CiAgICAgICAgdmFyIGFndlBvc2UsIGFndkFuZ2xlLCBwb3NlUm90YXRlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOSQoX2NvbnRleHQ5KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OS5wcmV2ID0gX2NvbnRleHQ5Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBhZ3ZQb3NlID0gX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9hZ3YpLnNpbTEwMDBQb3NlOwogICAgICAgICAgICAgICAgYWd2QW5nbGUgPSBhZ3ZQb3NlLnBvc2V5YXcgKiBNYXRoLlBJIC8gMTgwMDAwOwogICAgICAgICAgICAgICAgcG9zZVJvdGF0ZSA9IHsKICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb246IFJPUzJELmdsb2JhbFRoZXRhVG9RdWF0ZXJuaW9uKGFndkFuZ2xlKSwKICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHsKICAgICAgICAgICAgICAgICAgICB4OiAoYWd2UG9zZS5wb3NleCArIDIwMDAgKiBNYXRoLmNvcyhhZ3ZBbmdsZSkpIC8gMTAwMCwKICAgICAgICAgICAgICAgICAgICB5OiAoYWd2UG9zZS5wb3NleSArIDIwMDAgKiBNYXRoLnNpbihhZ3ZBbmdsZSkpIC8gMTAwMCwKICAgICAgICAgICAgICAgICAgICB6OiAwCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoQWN0aW9uKHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IEFHVl9BQ1RJT04uTElGVF9PVVQsCiAgICAgICAgICAgICAgICAgIHR5cGU6ICJnZW9tZXRyeV9tc2dzL1Bvc2VTdGFtcGVkIiwKICAgICAgICAgICAgICAgICAgZGF0YTogewogICAgICAgICAgICAgICAgICAgIGhlYWRlcjogewogICAgICAgICAgICAgICAgICAgICAgc2VxOiAwLAogICAgICAgICAgICAgICAgICAgICAgc3RhbXA6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc2VjOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBuc2VjOiAwCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgZnJhbWVfaWQ6ICdtYXAnCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBwb3NlOiBwb3NlUm90YXRlCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbGlmdE91dCcpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTksIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBsaWZ0T3V0KCkgewogICAgICAgIHJldHVybiBfbGlmdE91dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gbGlmdE91dDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogInJ1bkpvYiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3J1bkpvYiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEwKCkgewogICAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgICB2YXIgam9iLCBtYXBTY2FsZSwgbWFwUm9zSW5mbywgcmVzdWx0LCBkb25lLCBpLCB0YXNrLCBhZ3ZQb3NlLCBwb3NlLCBwb3NlUm90YXRlLCBqLCBhY3Rpb247CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMCQoX2NvbnRleHQxMCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDEwLnByZXYgPSBfY29udGV4dDEwLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBqb2IgPSBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX3Jvc1N0b3JlKS5zdGF0ZS5hZ3ZKb2JzLmZpbmQoZnVuY3Rpb24gKGopIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGouaWQgPT09IF9jbGFzc1ByaXZhdGVGaWVsZEdldChfdGhpczMsIF9hZ3YpLmpvYklkOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgaWYgKCEoam9iID09IG51bGwgfHwgam9iLnRhc2tzLmxlbmd0aCA9PSAwKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSAzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBtYXBTY2FsZSA9IF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfbWFwKS53ZWJNYXAuc2NhbGU7CiAgICAgICAgICAgICAgICBtYXBSb3NJbmZvID0gX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9tYXApLnJvc01hcC5pbmZvOwogICAgICAgICAgICAgICAgcmVzdWx0ID0gMDsKICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlOwoKICAgICAgICAgICAgICAgIF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfcm9zU3RvcmUpLmNvbW1pdCgiYWd2cy9zZXRSdW5uaW5nU3RhdGUiLCB7CiAgICAgICAgICAgICAgICAgIGFndklkOiBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX2lkKSwKICAgICAgICAgICAgICAgICAgaXNSdW5uZ2luZzogdHJ1ZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgaSA9IDA7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIGlmICghKGkgPCBqb2IudGFza3MubGVuZ3RoKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSA1NjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGFzayA9IGpvYi50YXNrc1tpXTsKCiAgICAgICAgICAgICAgICBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX3Jvc1N0b3JlKS5jb21taXQoImFndnMvc2V0QWd2VGFzayIsIHsKICAgICAgICAgICAgICAgICAgYWd2SWQ6IF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfaWQpLAogICAgICAgICAgICAgICAgICB0YXNrSWQ6IHRhc2suaWQKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGFndlBvc2UgPSBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX2Fndikuc2ltMTAwMFBvc2U7CiAgICAgICAgICAgICAgICBwb3NlID0gewogICAgICAgICAgICAgICAgICBvcmllbnRhdGlvbjogUk9TMkQuZ2xvYmFsVGhldGFUb1F1YXRlcm5pb24odGFzay50aGV0YUVuZCAqIE1hdGguUEkgLyAxODApLAogICAgICAgICAgICAgICAgICBwb3NpdGlvbjogewogICAgICAgICAgICAgICAgICAgIHg6IG1hcFJvc0luZm8ub3JpZ2luLnBvc2l0aW9uLnggKyB0YXNrLnBvc2l0aW9uLnggKiBtYXBSb3NJbmZvLnJlc29sdXRpb24gLyBtYXBTY2FsZSwKICAgICAgICAgICAgICAgICAgICB5OiBtYXBSb3NJbmZvLm9yaWdpbi5wb3NpdGlvbi55IC0gKHRhc2sucG9zaXRpb24ueSAvIG1hcFNjYWxlIC0gbWFwUm9zSW5mby5oZWlnaHQpICogbWFwUm9zSW5mby5yZXNvbHV0aW9uLAogICAgICAgICAgICAgICAgICAgIHo6IDAKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHBvc2VSb3RhdGUgPSB7CiAgICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uOiBST1MyRC5nbG9iYWxUaGV0YVRvUXVhdGVybmlvbihNYXRoLmF0YW4yKHBvc2UucG9zaXRpb24ueSAtIGFndlBvc2UucG9zZXkgLyAxMDAwLCBwb3NlLnBvc2l0aW9uLnggLSBhZ3ZQb3NlLnBvc2V4IC8gMTAwMCkpLAogICAgICAgICAgICAgICAgICBwb3NpdGlvbjogewogICAgICAgICAgICAgICAgICAgIHg6IGFndlBvc2UucG9zZXggLyAxMDAwLAogICAgICAgICAgICAgICAgICAgIHk6IGFndlBvc2UucG9zZXkgLyAxMDAwLAogICAgICAgICAgICAgICAgICAgIHo6IDAKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVzaEFjdGlvbih7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBBR1ZfQUNUSU9OLlJPVEFURV9HT0FMLAogICAgICAgICAgICAgICAgICB0eXBlOiAiZ2VvbWV0cnlfbXNncy9Qb3NlU3RhbXBlZCIsCiAgICAgICAgICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgICAgICAgICBoZWFkZXI6IHsKICAgICAgICAgICAgICAgICAgICAgIHNlcTogMCwKICAgICAgICAgICAgICAgICAgICAgIHN0YW1wOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlYzogMCwKICAgICAgICAgICAgICAgICAgICAgICAgbnNlYzogMAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGZyYW1lX2lkOiAnbWFwJwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcG9zZTogcG9zZVJvdGF0ZQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0MTAuc2VudDsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXN1bHQgYWN0aW9uIHJvdGF0ZSA9ICcsIHJlc3VsdCk7CiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9IEFHVl9BQ1RJT05fU1RBVFVTLlNVQ0NFRURFRCkgZG9uZSA9IGZhbHNlOwoKICAgICAgICAgICAgICAgIGlmIChkb25lKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5hYnJ1cHQoImJyZWFrIiwgNTYpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gMjQ7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoQWN0aW9uKHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IEFHVl9BQ1RJT04uTU9WRV9HT0FMLAogICAgICAgICAgICAgICAgICB0eXBlOiAiZ2VvbWV0cnlfbXNncy9Qb3NlU3RhbXBlZCIsCiAgICAgICAgICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgICAgICAgICBoZWFkZXI6IHsKICAgICAgICAgICAgICAgICAgICAgIHNlcTogMCwKICAgICAgICAgICAgICAgICAgICAgIHN0YW1wOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlYzogMCwKICAgICAgICAgICAgICAgICAgICAgICAgbnNlYzogMAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGZyYW1lX2lkOiAnbWFwJwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcG9zZTogcG9zZQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyNDoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0MTAuc2VudDsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXN1bHQgYWN0aW9uIG1vdmUgZ29hbCA9ICcsIHJlc3VsdCk7CiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9IEFHVl9BQ1RJT05fU1RBVFVTLlNVQ0NFRURFRCkgZG9uZSA9IGZhbHNlOwoKICAgICAgICAgICAgICAgIGlmIChkb25lKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDI5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5hYnJ1cHQoImJyZWFrIiwgNTYpOwoKICAgICAgICAgICAgICBjYXNlIDI5OgogICAgICAgICAgICAgICAgaiA9IDA7CgogICAgICAgICAgICAgIGNhc2UgMzA6CiAgICAgICAgICAgICAgICBpZiAoIShqIDwgdGFzay5hY3Rpb25zLmxlbmd0aCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gNTE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGFjdGlvbiA9IHRhc2suYWN0aW9uc1tqXTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTAudDAgPSBhY3Rpb24uYWN0aW9uOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gX2NvbnRleHQxMC50MCA9PT0gQUdWX0FDVElPTi5DSEFSR0lOR19PVVQgPyAzNSA6IF9jb250ZXh0MTAudDAgPT09IEFHVl9BQ1RJT04uTElGVF9PVVQgPyAzOCA6IF9jb250ZXh0MTAudDAgPT09IEFHVl9BQ1RJT04uQ0hBUkdJTkdfSU4gPyA0MSA6IF9jb250ZXh0MTAudDAgPT09IEFHVl9BQ1RJT04uTElGVF9JTiA/IDQxIDogX2NvbnRleHQxMC50MCA9PT0gQUdWX0FDVElPTi5MSUZUX1VQID8gNDEgOiBfY29udGV4dDEwLnQwID09PSBBR1ZfQUNUSU9OLkxJRlRfRE9XTiA/IDQxIDogNDY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAzNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDM3OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmdpbmdFbmQoKTsKCiAgICAgICAgICAgICAgY2FzZSAzNzoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLmFicnVwdCgiYnJlYWsiLCA0Nik7CgogICAgICAgICAgICAgIGNhc2UgMzg6CiAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSA0MDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxpZnRPdXQoKTsKCiAgICAgICAgICAgICAgY2FzZSA0MDoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLmFicnVwdCgiYnJlYWsiLCA0Nik7CgogICAgICAgICAgICAgIGNhc2UgNDE6CiAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSA0MzsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2hBY3Rpb24oewogICAgICAgICAgICAgICAgICB2YWx1ZTogYWN0aW9uLmFjdGlvbiwKICAgICAgICAgICAgICAgICAgdHlwZTogImdlb21ldHJ5X21zZ3MvUG9zZVN0YW1wZWQiLAogICAgICAgICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiB7CiAgICAgICAgICAgICAgICAgICAgICBzZXE6IDAsCiAgICAgICAgICAgICAgICAgICAgICBzdGFtcDogewogICAgICAgICAgICAgICAgICAgICAgICBzZWM6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIG5zZWM6IDAKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBmcmFtZV9pZDogJ21hcCcKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHBvc2U6IHBvc2UKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNDM6CiAgICAgICAgICAgICAgICByZXN1bHQgPSBfY29udGV4dDEwLnNlbnQ7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVzdWx0IGFjdGlvbiBkb2luZyBhY3Rpb24gJywgYWN0aW9uLm5hbWUsICIgPSAiLCByZXN1bHQpOwogICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPSBBR1ZfQUNUSU9OX1NUQVRVUy5TVUNDRUVERUQpIGRvbmUgPSBmYWxzZTsKCiAgICAgICAgICAgICAgY2FzZSA0NjoKICAgICAgICAgICAgICAgIGlmIChkb25lKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDQ4OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5hYnJ1cHQoImJyZWFrIiwgNTEpOwoKICAgICAgICAgICAgICBjYXNlIDQ4OgogICAgICAgICAgICAgICAgaisrOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gMzA7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA1MToKICAgICAgICAgICAgICAgIGlmIChkb25lKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDUzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5hYnJ1cHQoImJyZWFrIiwgNTYpOwoKICAgICAgICAgICAgICBjYXNlIDUzOgogICAgICAgICAgICAgICAgaSsrOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDU2OgogICAgICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9yb3NTdG9yZSkuY29tbWl0KCJhZ3ZzL3NldFJ1bm5pbmdTdGF0ZSIsIHsKICAgICAgICAgICAgICAgICAgYWd2SWQ6IF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfaWQpLAogICAgICAgICAgICAgICAgICBpc1J1bm5naW5nOiBmYWxzZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgaWYgKGRvbmUpIHsKICAgICAgICAgICAgICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9yb3NTdG9yZSkuY29tbWl0KCJhZ3ZKb2JzL2NsZWFyVGFza0Zyb21Kb2IiLCB7CiAgICAgICAgICAgICAgICAgICAgam9iSWQ6IF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfYWd2KS5qb2JJZAogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSA1ODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTEwLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gcnVuSm9iKCkgewogICAgICAgIHJldHVybiBfcnVuSm9iLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBydW5Kb2I7CiAgICB9KCkKICB9XSk7CgogIHJldHVybiBBZ3ZyUm9ib3Q7Cn0oKTsKCmV4cG9ydCB7IEFndnJSb2JvdCBhcyBkZWZhdWx0IH07"},{"version":3,"sources":["/home/robotics/AnhNV/agv-dasboard/src/services/agvr/agvr-robot.js"],"names":["ROSLIB","Vue","AgvrDiagnostics","AgvrAction","AgvrSim1000Pose","ROS2D","AGV_ACTION_STATUS","AGV_ACTION","AgvrRobot","id","mapId","Ros","url","on","e","console","log","commit","agvId","isConnected","dispose","setTimeout","prototype","$store","state","agvMaps","find","m","agvs","r","rosMasterUri","twist","speed","properties","linear","x","movementSpeed","y","z","angular","rotateSpeed","clearInterval","pushAction","value","MANUAL","type","data","setInterval","agvPose","webPose","INITIAL_POSE","header","seq","stamp","sec","nsec","frame_id","pose","position","rosMap","info","origin","resolution","webMap","scale","height","orientation","globalThetaToQuaternion","Math","PI","action","waitResult","LIFT_UP","LIFT_DOWN","CHARGING_IN","sim1000Pose","agvAngle","poseyaw","poseRotate","posex","cos","posey","sin","CHARGING_OUT","LIFT_IN","LIFT_OUT","job","agvJobs","j","jobId","tasks","length","mapScale","mapRosInfo","result","done","isRunnging","i","task","taskId","thetaEnd","atan2","ROTATE_GOAL","SUCCEEDED","MOVE_GOAL","actions","chargingEnd","liftOut","name"],"mappings":"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","sourcesContent":["import ROSLIB from \"roslib\";\nimport Vue from \"vue\";\nimport AgvrDiagnostics from \"./agvr-diagnostics\";\nimport AgvrAction from \"./agvr-action\";\nimport AgvrSim1000Pose from \"./agvr-sim1000-pose\";\nimport { ROS2D } from '@/utils/ros';\nimport * as AGV_ACTION_STATUS from './agv-action-status';\nimport * as AGV_ACTION from \"./agv-action-type\";\n\nexport default class AgvrRobot {\n  #id = null;\n  #agv = null;\n  #mapId = null;\n  #map = null;\n  #ros = null;\n  #rosUrl = null;\n  #rosStore = null;\n\n  #agvrDiagnostics = null;\n  #agvrAction = null;\n  #agvrSim1000Pose = null;\n\n  #twistCmdVel = null;\n  #timerPublishCmdVel = null;\n  #intervalPush = 100;\n\n  constructor(id, mapId) {\n    this.#id = id;\n    this.#mapId = mapId;\n    this.#rosStore = Vue.prototype.$store;\n    this.#map = this.#rosStore.state.agvMaps.find((m) => m.id === mapId);\n    this.#agv = this.#rosStore.state.agvs.find((r) => r.id === this.#id);\n    this.#rosUrl = this.#agv.rosMasterUri;\n    this.#rosConnect();\n  }\n\n  #rosConnect = () => {\n    this.#ros = new ROSLIB.Ros({ url: this.#rosUrl });\n    this.#ros.on(\"connection\", this.#onRosConnected);\n    this.#ros.on(\"close\", this.#onRosDisconnected);\n    this.#ros.on(\"error\", (e) => console.log(\"AGVR error: \", e));\n  }\n\n  #onRosConnected = () => {\n    this.#agvrAction = new AgvrAction(this.#ros);\n    this.#agvrDiagnostics = new AgvrDiagnostics(this.#ros, this.#id);\n    this.#agvrSim1000Pose = new AgvrSim1000Pose(this.#ros, this.#id, this.#mapId);\n\n    this.#rosStore.commit(\"agvs/setConnectionState\", {\n      agvId: this.#id,\n      isConnected: true,\n    })\n  }\n\n  #onRosDisconnected = () => {\n    if (this.#agvrDiagnostics != null) {\n      this.#agvrDiagnostics.dispose();\n      this.#agvrDiagnostics = null;\n    }\n    if (this.#agvrAction != null) {\n      this.#agvrAction.dispose();\n      this.#agvrAction = null;\n    }\n    if (this.#agvrSim1000Pose != null) {\n      this.#agvrSim1000Pose.dispose();\n      this.#agvrSim1000Pose = null;\n    }\n\n    this.#rosStore.commit(\"agvs/setConnectionState\", {\n      agvId: this.#id,\n      isConnected: false,\n    });\n\n    setTimeout(this.#rosConnect, 3000);\n  }\n\n  async pushCmdvel(twist) {\n    if (twist == null) return;\n\n    let speed = this.#agv.properties;\n    this.#twistCmdVel = {\n      linear: {\n        x: twist.linear.x * speed.movementSpeed.x,\n        y: twist.linear.y * speed.movementSpeed.y,\n        z: twist.linear.z * speed.movementSpeed.z,\n      },\n      angular: {\n        x: twist.angular.x * speed.rotateSpeed.x,\n        y: twist.angular.y * speed.rotateSpeed.y,\n        z: twist.angular.z * speed.rotateSpeed.z,\n      },\n    };\n\n    if (this.#timerPublishCmdVel != null) clearInterval(this.#timerPublishCmdVel);\n    await this.pushAction({\n      value: AGV_ACTION.MANUAL,\n      type: \"geometry_msgs/Twist\",\n      data: this.#twistCmdVel,\n    }, false);\n\n    if (this.#twistCmdVel.linear.x != 0 || this.#twistCmdVel.angular.z != 0) {\n      this.#timerPublishCmdVel = setInterval(async () => {\n        if (this.#agvrAction == null || this.#twistCmdVel == null) return;\n        await this.#agvrAction.pushAction({\n          value: AGV_ACTION.MANUAL,\n          type: \"geometry_msgs/Twist\",\n          data: this.#twistCmdVel,\n        }, false);\n      }, this.#intervalPush);\n    }\n  }\n\n  initializePose() {\n    let agvPose = this.#agv.webPose;\n    this.pushAction({\n      value: AGV_ACTION.INITIAL_POSE,\n      type: \"geometry_msgs/PoseStamped\",\n      data: {\n        header: {\n          seq: 0,\n          stamp: {\n            sec: 0,\n            nsec: 0,\n          },\n          frame_id: '',\n        },\n        pose: {\n          position: {\n            x: this.#map.rosMap.info.origin.position.x + agvPose.position.x * this.#map.rosMap.info.resolution / this.#map.webMap.scale,\n            y: this.#map.rosMap.info.origin.position.y - ((agvPose.position.y / this.#map.webMap.scale) - this.#map.rosMap.info.height) * this.#map.rosMap.info.resolution,\n            z: 0,\n          },\n          orientation: ROS2D.globalThetaToQuaternion(agvPose.orientation.z * Math.PI / 180),\n        }\n      },\n    })\n  }\n\n  async pushAction(action, waitResult = true) {\n    if (this.#agvrAction == null) return null;\n\n    if(waitResult) console.log('push action ', action);\n    return await this.#agvrAction.pushAction(action, waitResult);\n  }\n\n  async liftUp() {\n    await this.pushAction({\n      value: AGV_ACTION.LIFT_UP,\n      type: \"geometry_msgs/Twist\",\n      data: {\n        linear: {\n          x: 0,\n          y: 0,\n          z: 0,\n        },\n        angular: {\n          x: 0,\n          y: 0,\n          z: 0,\n        },\n      },\n    })\n  }\n\n  async liftDown() {\n    await this.pushAction({\n      value: AGV_ACTION.LIFT_DOWN,\n      type: \"geometry_msgs/Twist\",\n      data: {\n        linear: { x: 0, y: 0, z: 0, },\n        angular: { x: 0, y: 0, z: 0, },\n      },\n    })\n  }\n\n  async chargingStart() {\n    await this.pushAction({\n      value: AGV_ACTION.CHARGING_IN,\n      type: \"geometry_msgs/Twist\",\n      data: {\n        linear: { x: 0, y: 0, z: 0, },\n        angular: { x: 0, y: 0, z: 0, },\n      },\n    })\n  }\n\n  async chargingEnd() {\n    let agvPose = this.#agv.sim1000Pose;\n    let agvAngle = agvPose.poseyaw * Math.PI / 180000;\n    let poseRotate = {\n      orientation: ROS2D.globalThetaToQuaternion(agvAngle),\n      position: {\n        x: (agvPose.posex + 2000 * Math.cos(agvAngle)) / 1000,\n        y: (agvPose.posey + 2000 * Math.sin(agvAngle)) / 1000,\n        z: 0,\n      },\n    };\n    \n    await this.pushAction({\n      value: AGV_ACTION.CHARGING_OUT,\n      type: \"geometry_msgs/PoseStamped\",\n      data: {\n        header: {\n          seq: 0,\n          stamp: {\n            sec: 0,\n            nsec: 0,\n          },\n          frame_id: 'map',\n        },\n        pose: poseRotate,\n      },\n    });\n    console.log('chargingEnd');\n  }\n\n  async liftIn() {\n    await this.pushAction({\n      value: AGV_ACTION.LIFT_IN,\n      type: \"geometry_msgs/Twist\",\n      data: {\n        linear: { x: 0, y: 0, z: 0, },\n        angular: { x: 0, y: 0, z: 0, },\n      },\n    })\n  }\n\n  async liftOut() {\n    let agvPose = this.#agv.sim1000Pose;\n    let agvAngle = agvPose.poseyaw * Math.PI / 180000;\n    let poseRotate = {\n      orientation: ROS2D.globalThetaToQuaternion(agvAngle),\n      position: {\n        x: (agvPose.posex + 2000 * Math.cos(agvAngle)) / 1000,\n        y: (agvPose.posey + 2000 * Math.sin(agvAngle)) / 1000,\n        z: 0,\n      },\n    };\n    \n    await this.pushAction({\n      value: AGV_ACTION.LIFT_OUT,\n      type: \"geometry_msgs/PoseStamped\",\n      data: {\n        header: {\n          seq: 0,\n          stamp: {\n            sec: 0,\n            nsec: 0,\n          },\n          frame_id: 'map',\n        },\n        pose: poseRotate,\n      },\n    });\n    console.log('liftOut');\n  }\n\n  async runJob() {\n    let job = this.#rosStore.state.agvJobs.find(j => j.id === this.#agv.jobId);\n    if (job == null || job.tasks.length == 0) return;\n\n    let mapScale = this.#map.webMap.scale;\n    let mapRosInfo = this.#map.rosMap.info;\n    let result = 0;\n    let done = true;\n    this.#rosStore.commit(\"agvs/setRunningState\", {\n      agvId: this.#id,\n      isRunnging: true,\n    });\n    for (var i = 0; i < job.tasks.length; i++) {\n      let task = job.tasks[i];\n      this.#rosStore.commit(\"agvs/setAgvTask\", {\n        agvId: this.#id,\n        taskId: task.id,\n      })\n\n      let agvPose = this.#agv.sim1000Pose;\n      let pose = {\n        orientation: ROS2D.globalThetaToQuaternion(task.thetaEnd * Math.PI / 180),\n        position: {\n          x: mapRosInfo.origin.position.x + task.position.x * mapRosInfo.resolution / mapScale,\n          y: mapRosInfo.origin.position.y - ((task.position.y / mapScale) - mapRosInfo.height) * mapRosInfo.resolution,\n          z: 0,\n        },\n      };\n      let poseRotate = {\n        orientation: ROS2D.globalThetaToQuaternion(Math.atan2(pose.position.y - agvPose.posey / 1000, pose.position.x - agvPose.posex / 1000)),\n        position: {\n          x: agvPose.posex / 1000,\n          y: agvPose.posey / 1000,\n          z: 0,\n        },\n      };\n      result = await this.pushAction({\n        value: AGV_ACTION.ROTATE_GOAL,\n        type: \"geometry_msgs/PoseStamped\",\n        data: {\n          header: {\n            seq: 0,\n            stamp: {\n              sec: 0,\n              nsec: 0,\n            },\n            frame_id: 'map',\n          },\n          pose: poseRotate,\n        },\n      });\n      console.log('result action rotate = ', result);\n      if(result != AGV_ACTION_STATUS.SUCCEEDED) done = false;\n      if(!done) break;\n\n      result = await this.pushAction({\n        value: AGV_ACTION.MOVE_GOAL,\n        type: \"geometry_msgs/PoseStamped\",\n        data: {\n          header: { \n            seq: 0, \n            stamp: {\n              sec: 0,\n              nsec: 0,\n            }, \n            frame_id: 'map', \n          },\n          pose,\n        },\n      });\n      console.log('result action move goal = ', result);\n      if(result != AGV_ACTION_STATUS.SUCCEEDED) done = false;\n      if(!done) break;\n\n      for(let j = 0; j < task.actions.length; j++) {\n        let action = task.actions[j];\n        switch(action.action) {\n          case AGV_ACTION.CHARGING_OUT:\n            await this.chargingEnd();\n            break;\n          case AGV_ACTION.LIFT_OUT:\n            await this.liftOut();\n            break;\n          case AGV_ACTION.CHARGING_IN:\n          case AGV_ACTION.LIFT_IN:\n          case AGV_ACTION.LIFT_UP:\n          case AGV_ACTION.LIFT_DOWN:\n            result = await this.pushAction({\n              value: action.action,\n              type: \"geometry_msgs/PoseStamped\",\n              data: {\n                header: { \n                  seq: 0, \n                  stamp: {\n                    sec: 0,\n                    nsec: 0,\n                  }, \n                  frame_id: 'map', \n                },\n                pose,\n              },\n            });\n            console.log('result action doing action ', action.name, \" = \", result);\n            if(result != AGV_ACTION_STATUS.SUCCEEDED) done = false;\n        }\n        if(!done) break;\n      }\n      if(!done) break;\n    }\n    this.#rosStore.commit(\"agvs/setRunningState\", {\n      agvId: this.#id,\n      isRunnging: false,\n    });\n    if(done) {\n      this.#rosStore.commit(\"agvJobs/clearTaskFromJob\", {jobId: this.#agv.jobId});\n    }\n  }\n}"]}]}