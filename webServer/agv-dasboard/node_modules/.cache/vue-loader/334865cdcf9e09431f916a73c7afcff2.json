{"remainingRequest":"/home/robotics/AnhNV/agv-dasboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/robotics/AnhNV/agv-dasboard/src/components/AgvrPoseEditor/AgvrPoseEditor.vue?vue&type=style&index=0&id=7d2bd2e2&scoped=true&lang=css&","dependencies":[{"path":"/home/robotics/AnhNV/agv-dasboard/src/components/AgvrPoseEditor/AgvrPoseEditor.vue","mtime":1609149480824},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/css-loader/dist/cjs.js","mtime":1602053620867},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1602053621134},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/postcss-loader/src/index.js","mtime":1602053621090},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/cache-loader/dist/cjs.js","mtime":1602053610278},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/vue-loader/lib/index.js","mtime":1602053621134}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoucG9zZS1pbnB1dCB7CiAgY2FyZXQtY29sb3I6IGJsYWNrOwp9Cg=="},{"version":3,"sources":["AgvrPoseEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsLA;AACA;AACA","file":"AgvrPoseEditor.vue","sourceRoot":"src/components/AgvrPoseEditor","sourcesContent":["<template>\n  <v-container class=\"pa-0\" fluid>\n    <v-row no-gutters justify=\"center\">\n      <v-col class=\"pa-1 pt-2\" xs=\"12\" sm=\"4\" md=\"3\" lg=\"2\">\n        <v-text-field\n          type=\"number\"\n          color=\"black\"\n          :prepend-inner-icon=\"'mdi-axis-x-arrow'\"\n          append-icon=\"mdi-alpha-m\"\n          label=\"X axit\"\n          outlined\n          dense\n          :step=\"0.001\"\n          v-model=\"positionX\"\n          :readonly=\"$router.currentRoute.path != '/navigation/init'\"\n          @keypress.enter=\"updatePosition\"\n          @blur=\"updatePosition\"\n          hide-details\n        />\n      </v-col>\n      <v-col class=\"pa-1 pt-2\" xs=\"12\" sm=\"4\" md=\"3\" lg=\"2\">\n        <v-text-field\n          type=\"number\"\n          color=\"black\"\n          :prepend-inner-icon=\"'mdi-axis-y-arrow'\"\n          append-icon=\"mdi-alpha-m\"\n          label=\"Y axit\"\n          outlined\n          dense\n          :step=\"0.001\"\n          v-model=\"positionY\"\n          :readonly=\"$router.currentRoute.path != '/navigation/init'\"\n          @keypress.enter=\"updatePosition\"\n          @blur=\"updatePosition\"\n          hide-details\n        />\n      </v-col>\n      <v-col class=\"pa-1 pt-2\" xs=\"12\" sm=\"4\" md=\"3\" lg=\"2\">\n        <v-text-field\n          type=\"number\"\n          color=\"black\"\n          :prepend-inner-icon=\"'mdi-axis-z-rotate-counterclockwise'\"\n          append-icon=\"mdi-alpha-d\"\n          label=\"Z angle\"\n          outlined\n          dense\n          :step=\"0.001\"\n          v-model=\"angleZ\"\n          :readonly=\"$router.currentRoute.path != '/navigation/init'\"\n          @keypress.enter=\"updateAngle\"\n          @blur=\"updateAngle\"\n          hide-details\n        />\n      </v-col>\n      <div class=\"d-flex\">\n        <span class=\"align-self-center\">{{agvSim1000PoseQuality}}%</span>\n      </div>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nimport { createNamespacedHelpers } from \"vuex\";\n\nconst { mapState: navigationMapState } = createNamespacedHelpers(\"navigation\");\nconst {\n  mapState: agvsMapState,\n  mapActions: agvsmapActions,\n} = createNamespacedHelpers(\"agvs\");\nconst { mapState: agvMapsMapState } = createNamespacedHelpers(\"agvMaps\");\n\nexport default {\n  name: \"AgvrPoseEditor\",\n  data() {\n    return {\n      tmpPositionX: 0,\n      tmpPositionY: 0,\n      tmpAngleZ: 0,\n    };\n  },\n  computed: {\n    ...navigationMapState({\n      navigationMapId: (state) => state.mapId,\n      navigationAgvId: (state) => state.agvId,\n    }),\n    ...agvsMapState({\n      agvWebPose(state) {\n        let agv = state.find((a) => a.id === this.navigationAgvId);\n        return agv != null\n          ? agv.webPose\n          : {\n              position: { x: 0, y: 0, z: 0 },\n              orientation: { x: 0, y: 0, z: 0 },\n            };\n      },\n      agvSim1000PoseQuality(state) {\n        let agv = state.find((a) => a.id === this.navigationAgvId);\n        return agv != null ? agv.sim1000Pose.quality : 0;\n      },\n    }),\n    ...agvMapsMapState({\n      agvMapScale(state) {\n        let map = state.find((m) => m.id === this.navigationMapId);\n        return map != null ? map.webMap.scale : 1;\n      },\n      agvRosMapInfo(state) {\n        let map = state.find((m) => m.id === this.navigationMapId);\n        return map.rosMap.info;\n      },\n    }),\n    positionX: {\n      get() {\n        return (\n          this.agvRosMapInfo.origin.position.x +\n          (this.agvWebPose.position.x * this.agvRosMapInfo.resolution) /\n            this.agvMapScale\n        ).toFixed(2);\n      },\n      set(val) {\n        this.tmpPositionX = parseFloat(val);\n      },\n    },\n    positionY: {\n      get() {\n        return (\n          this.agvRosMapInfo.origin.position.y -\n          (this.agvWebPose.position.y / this.agvMapScale -\n            this.agvRosMapInfo.height) *\n            this.agvRosMapInfo.resolution\n        ).toFixed(2);\n      },\n      set(val) {\n        this.tmpPositionY = parseFloat(val);\n      },\n    },\n    angleZ: {\n      get: function () {\n        return this.agvWebPose.orientation.z.toFixed(0);\n      },\n      set: function (val) {\n        this.tmpAngleZ = parseFloat(val);\n      },\n    },\n  },\n  methods: {\n    ...agvsmapActions({\n      setAgvDirection: \"setAgvDirection\",\n      setAgvPosition: \"setAgvPosition\",\n    }),\n    updatePosition() {\n      this.setAgvPosition({\n        x:\n          ((this.tmpPositionX - this.agvRosMapInfo.origin.position.x) *\n            this.agvMapScale) /\n          this.agvRosMapInfo.resolution,\n        y:\n          ((this.agvRosMapInfo.origin.position.y - this.tmpPositionY) /\n            this.agvRosMapInfo.resolution +\n            this.agvRosMapInfo.height) *\n          this.agvMapScale,\n        z: 0,\n        agvId: this.navigationAgvId,\n      });\n    },\n    updateAngle() {\n      this.setAgvDirection({\n        x: 0,\n        y: 0,\n        z: this.tmpAngleZ,\n        agvId: this.navigationAgvId,\n      });\n    },\n  },\n  mounted() {\n    this.tmpPositionX = this.positionX;\n    this.tmpPositionY = this.positionY;\n    this.tmpAngleZ = this.angleZ;\n  },\n};\n</script>\n\n<style scoped>\n.pose-input {\n  caret-color: black;\n}\n</style>"]}]}