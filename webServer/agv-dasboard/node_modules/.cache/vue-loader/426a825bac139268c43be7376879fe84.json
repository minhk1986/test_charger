{"remainingRequest":"/home/robotics/AnhNV/agv-dasboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/robotics/AnhNV/agv-dasboard/src/components/AgvrRobot/AgvrRobot.vue?vue&type=style&index=0&id=5f83e73e&lang=scss&scoped=true&","dependencies":[{"path":"/home/robotics/AnhNV/agv-dasboard/src/components/AgvrRobot/AgvrRobot.vue","mtime":1609215629114},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/css-loader/dist/cjs.js","mtime":1602053620867},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1602053621134},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/postcss-loader/src/index.js","mtime":1602053621090},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/sass-loader/dist/cjs.js","mtime":1602053625809},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/cache-loader/dist/cjs.js","mtime":1602053610278},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/vue-loader/lib/index.js","mtime":1602053621134}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5hZ3Ytcm9ib3QtY29ydmVyIHsKICBmaWxsOiAjOUNDQzY1Cn0K"},{"version":3,"sources":["AgvrRobot.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoJA;AACA;AACA","file":"AgvrRobot.vue","sourceRoot":"src/components/AgvrRobot","sourcesContent":["<template>\n  <g\n    @contextmenu=\"onContextMenu\"\n    @mousedown=\"selectedRobot\"\n    @touchstart=\"selectedRobot\"\n    :transform=\"transformData\"\n  >\n    <rect\n      :x=\"- 2\"\n      :y=\"- 2\"\n      :height=\"agvHeight + 4\"\n      :width=\"agvWidth + 4\"\n      class=\"agv-robot-corver\"\n    ></rect>\n    <image\n      :height=\"agvHeight\"\n      :width=\"agvWidth\"\n      href=\"@/assets/images/agv.svg\"\n    />\n    <image\n      :x=\"agvWidth / 4\"\n      :y=\"agvHeight / 4\"\n      :height=\"agvHeight / 2\"\n      :width=\"agvWidth / 2\"\n      href=\"@/assets/images/logo-white.png\"\n    />\n  </g>\n</template>\n\n<script>\nimport { createNamespacedHelpers } from \"vuex\";\n\nconst {\n  mapState: navigationMapState,\n  mapActions: navigationMapAction,\n} = createNamespacedHelpers(\"navigation\");\n\nconst { mapState: agvsMapState } = createNamespacedHelpers(\"agvs\");\n\nexport default {\n  name: \"AgvrRobot\",\n  data() {\n    return {\n      pathData: \"\",\n      timeoutContextMenu: null,\n      agvWidth: 0,\n      agvHeight: 0,\n    };\n  },\n  props: {\n    selectable: {\n      type: Boolean,\n      default: false,\n    },\n    agvId: {\n      type: String,\n      default: \"\",\n    },\n    agvMapResolution: {\n      type: Number,\n      default: 1,\n    },\n    agvMapScale: {\n      type: Number,\n      default: 1,\n    },\n  },\n  computed: {\n    ...agvsMapState({\n      agvWebSize(state) {\n        return state.find((a) => a.id === this.agvId).size;\n      },\n      agvWebPose(state) {\n        let agv = state.find((a) => a.id === this.agvId);\n        return agv != null\n          ? agv.webPose\n          : {\n              position: { x: 0, y: 0, z: 0 },\n              orientation: { x: 0, y: 0, z: 0 },\n            };\n      },\n    }),\n    ...navigationMapState({\n      isContextMenuShow: (state) =>\n        state.taskMenuContext.isShow ||\n        state.agvMenuContext.isShow ||\n        state.agvInitPoseMenuContext.isShow,\n    }),\n    transformData() {\n      return `rotate(${Math.floor(\n        90 - this.agvWebPose.orientation.z\n      )},${Math.floor(this.agvWebPose.position.x)},${Math.floor(\n        this.agvWebPose.position.y\n      )}) translate(${this.agvWebPose.position.x - this.agvWidth / 2}, ${this.agvWebPose.position.y - this.agvHeight / 2})`;\n    },\n  },\n  methods: {\n    ...navigationMapAction({\n      navigationShowAgvMenuContext: \"showAgvMenuContext\",\n      navigationShowAgvInitPoseMenuContext: \"showAgvInitPoseMenuContext\",\n      navigationDisableMapPanZoom: \"disableMapPanZoom\",\n      navigationSelectedRobot: \"selectedRobot\",\n    }),\n    onContextMenu(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.$nextTick(() => {\n        if (this.selectable) {\n          this.navigationShowAgvInitPoseMenuContext({\n            x: e.clientX,\n            y: e.clientY,\n          });\n        } else {\n          this.navigationShowAgvMenuContext({\n            x: e.clientX,\n            y: e.clientY,\n          });\n        }\n      });\n    },\n    selectedRobot() {\n      if (this.isContextMenuShow) return;\n      this.navigationDisableMapPanZoom();\n      if (this.selectable) {\n        this.navigationSelectedRobot();\n      }\n    },\n  },\n  mounted() {\n    this.agvWidth =\n      (this.agvWebSize.width * this.agvMapScale) / this.agvMapResolution;\n    this.agvHeight =\n      (this.agvWebSize.height * this.agvMapScale) / this.agvMapResolution;\n  },\n  watch: {\n    agvWebSize(val) {\n      this.agvWidth = (val.width * this.agvMapScale) / this.agvMapResolution;\n      this.agvHeight = (val.height * this.agvMapScale) / this.agvMapResolution;\n    },\n    agvMapResolution(val) {\n      this.agvWidth = (this.agvWebSize.width * this.agvMapScale) / val;\n      this.agvHeight = (this.agvWebSize.height * this.agvMapScale) / val;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.agv-robot-corver {\n  fill: #9CCC65\n}\n</style>"]}]}