{"remainingRequest":"/home/robotics/TungNV/agv_v2_ws/src/agv_v2/webServer/agv-dasboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/robotics/TungNV/agv_v2_ws/src/agv_v2/webServer/agv-dasboard/src/components/AgvrJoyStickButton/AgvrJoyStickButton.vue?vue&type=style&index=0&id=456775e2&scoped=true&lang=css&","dependencies":[{"path":"/home/robotics/TungNV/agv_v2_ws/src/agv_v2/webServer/agv-dasboard/src/components/AgvrJoyStickButton/AgvrJoyStickButton.vue","mtime":1609316939484},{"path":"/home/robotics/TungNV/agv_v2_ws/src/agv_v2/webServer/agv-dasboard/node_modules/css-loader/dist/cjs.js","mtime":1609316939716},{"path":"/home/robotics/TungNV/agv_v2_ws/src/agv_v2/webServer/agv-dasboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1609316942716},{"path":"/home/robotics/TungNV/agv_v2_ws/src/agv_v2/webServer/agv-dasboard/node_modules/postcss-loader/src/index.js","mtime":1609316940928},{"path":"/home/robotics/TungNV/agv_v2_ws/src/agv_v2/webServer/agv-dasboard/node_modules/cache-loader/dist/cjs.js","mtime":1609316939616},{"path":"/home/robotics/TungNV/agv_v2_ws/src/agv_v2/webServer/agv-dasboard/node_modules/vue-loader/lib/index.js","mtime":1609316942712}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5hZ3Ytam95c3RpY2sgewogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMSwgMSwgMSwgMC4zKTsKICBib3JkZXItcmFkaXVzOiA1MCU7Cn0KLmFndi1qb3lzdGljay1wb2ludCB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmVkOwogIGJvcmRlci1yYWRpdXM6IDUwJTsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0K"},{"version":3,"sources":["AgvrJoyStickButton.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AgvrJoyStickButton.vue","sourceRoot":"src/components/AgvrJoyStickButton","sourcesContent":["<template>\n  <div\n    class=\"agv-joystick\"\n    :style=\"{\n      height: `${joystickHeight}px`,\n      width: `${joystickWidth}px`,\n    }\"\n  >\n    <div\n      class=\"agv-joystick-point\"\n      :style=\"{\n        top: `${joystickHandleTop}px`,\n        left: `${joystickHandleLeft}px`,\n        height: `${joystickHandleHeight}px`,\n        width: `${joystickHandleWidth}px`,\n      }\"\n      @mousedown=\"() => (joystickClicked = true)\"\n      @mouseup=\"() => (joystickClicked = false)\"\n      @mouseleave=\"() => (joystickClicked = false)\"\n      @mousemove=\"(e) => joystickMove(e.movementX, e.movementY)\"\n      @touchstart=\"joystickTouchStart\"\n      @touchend=\"joystickTouchEnd\"\n      @touchmove=\"onTouchMove\"\n    />\n  </div>\n</template>\n\n<script>\nimport { createNamespacedHelpers } from \"vuex\";\nimport { CmdVel } from \"@/utils/ros\";\nconst { mapState: navigationMapState } = createNamespacedHelpers(\"navigation\");\n\nexport default {\n  name: \"AgvrJoyStickButton\",\n  data: () => ({\n    joystickClicked: false,\n    joystickHandleTop: 0,\n    joystickHandleLeft: 0,\n    touchClientX: -1,\n    touchClientY: -1,\n  }),\n  props: {\n    width: {\n      type: Number,\n      default: null,\n    },\n    height: {\n      type: Number,\n      default: null,\n    },\n    handleWidth: {\n      type: Number,\n      default: null,\n    },\n    handleHeight: {\n      type: Number,\n      default: null,\n    },\n  },\n  computed: {\n    ...navigationMapState({\n      navigationAgvId: (state) => state.agvId,\n    }),\n    joystickStyle() {\n      return {\n        height: this.height ? `${this.height}px` : null,\n        width: this.width ? `${this.width}px` : null,\n      };\n    },\n    joystickWidth() {\n      return this.width ? this.width : 200;\n    },\n    joystickHeight() {\n      return this.height ? this.height : 200;\n    },\n    joystickHandleWidth() {\n      return this.handleWidth ? this.handleWidth : 80;\n    },\n    joystickHandleHeight() {\n      return this.handleHeight ? this.handleHeight : 80;\n    },\n    joystickHandleX() {\n      return (this.joystickWidth - this.joystickHandleWidth) / 2;\n    },\n    joystickHandleY() {\n      return (this.joystickHeight - this.joystickHandleHeight) / 2;\n    },\n  },\n  mounted() {\n    this.joystickResetPosition();\n  },\n  methods: {\n    joystickMove(movementX, movementY) {\n      if (this.joystickClicked) {\n        let centerY =\n          this.joystickHandleTop +\n          movementY +\n          this.joystickHandleHeight / 2 -\n          this.joystickHeight / 2;\n        let centerX =\n          this.joystickHandleLeft +\n          movementX +\n          this.joystickHandleWidth / 2 -\n          this.joystickWidth / 2;\n        let d = Math.sqrt(Math.pow(centerX, 2) + Math.pow(centerY, 2));\n        if (d <= this.joystickHandleX && d <= this.joystickHandleY) {\n          this.joystickHandleTop += movementY;\n          this.joystickHandleLeft += movementX;\n          this.$agvr.robots[this.navigationAgvId].pushCmdvel(\n            CmdVel.controlMetaToTwistMessage({\n              x: centerX / this.joystickHandleX,\n              y: -centerY / this.joystickHandleY,\n            })\n          );\n        }\n      }\n    },\n    joystickResetPosition() {\n      this.joystickHandleTop = this.joystickHandleX;\n      this.joystickHandleLeft = this.joystickHandleY;\n      this.$agvr.robots[this.navigationAgvId].pushCmdvel(CmdVel.controlMetaToTwistMessage({ x: 0, y: 0 }));\n    },\n    joystickTouchStart(e) {\n      let touch = e.changedTouches[0];\n      this.touchClientX = touch.clientX;\n      this.touchClientY = touch.clientY;\n      this.joystickClicked = true;\n    },\n    joystickTouchEnd() {\n      this.touchClientX = -1;\n      this.touchClientY = -1;\n      this.joystickClicked = false;\n    },\n    onTouchMove(e) {\n      e.preventDefault();\n      if (this.touchClientX > 0 && this.touchClientY > 0) {\n        let touch = e.changedTouches[0];\n        this.joystickMove(\n          touch.clientX - this.touchClientX,\n          touch.clientY - this.touchClientY\n        );\n        this.touchClientX = touch.clientX;\n        this.touchClientY = touch.clientY;\n      }\n    },\n  },\n  watch: {\n    joystickClicked(newVal, oldVal) {\n      if (newVal != oldVal && !newVal) {\n        this.joystickResetPosition();\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.agv-joystick {\n  background-color: rgba(1, 1, 1, 0.3);\n  border-radius: 50%;\n}\n.agv-joystick-point {\n  background-color: red;\n  border-radius: 50%;\n  position: relative;\n}\n</style>\n"]}]}