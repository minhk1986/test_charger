{"remainingRequest":"/home/robotics/AnhNV/agv-dasboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/robotics/AnhNV/agv-dasboard/src/components/AgvrActionManagement/AgvrActionManagement.vue?vue&type=style&index=0&id=d199a3a2&scoped=true&lang=css&","dependencies":[{"path":"/home/robotics/AnhNV/agv-dasboard/src/components/AgvrActionManagement/AgvrActionManagement.vue","mtime":1609149480156},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/css-loader/dist/cjs.js","mtime":1602053620867},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1602053621134},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/postcss-loader/src/index.js","mtime":1602053621090},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/cache-loader/dist/cjs.js","mtime":1602053610278},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/vue-loader/lib/index.js","mtime":1602053621134}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmFjdGlvbi1tYW5hZ2VtZW50LXN0ZXBwZXIgewogIGJveC1zaGFkb3c6IG5vbmU7Cn0K"},{"version":3,"sources":["AgvrActionManagement.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiXA;AACA;AACA","file":"AgvrActionManagement.vue","sourceRoot":"src/components/AgvrActionManagement","sourcesContent":["<template>\n  <v-navigation-drawer\n    v-model=\"isShow\"\n    absolute\n    temporary\n    right\n    width=\"500\"\n    :style=\"{ boxShadow: 'none' }\"\n  >\n    <v-container fluid class=\"pa-0\">\n      <v-row>\n        <v-col class=\"d-flex flex-column px-6 pb-0\">\n          <v-text-field\n            dense\n            hide-details\n            class=\"mb-6\"\n            type=\"number\"\n            label=\"Position X\"\n            outlined\n            :step=\"0.001\"\n            :prepend-inner-icon=\"'mdi-axis-x-arrow'\"\n            append-icon=\"mdi-alpha-m\"\n            v-model=\"positionX\"\n          />\n          <v-text-field\n            dense\n            hide-details\n            class=\"mb-6\"\n            type=\"number\"\n            label=\"Position Y\"\n            outlined\n            :step=\"0.001\"\n            :prepend-inner-icon=\"'mdi-axis-y-arrow'\"\n            append-icon=\"mdi-alpha-m\"\n            v-model=\"positionY\"\n          />\n          <v-text-field\n            dense\n            hide-details\n            class=\"mb-2\"\n            type=\"number\"\n            label=\"Angle\"\n            outlined\n            :step=\"0.001\"\n            :prepend-inner-icon=\"'mdi-axis-z-rotate-counterclockwise'\"\n            append-icon=\"mdi-alpha-d\"\n            v-model=\"thetaEnd\"\n          />\n        </v-col>\n      </v-row>\n      <v-row class=\"flex-shrink-1\">\n        <v-col class=\"pt-0\">\n          <v-stepper class=\"action-management-stepper\" v-model=\"step\" vertical>\n            <template v-for=\"(stepItem, index) in actionCollection\">\n              <div :key=\"`step-${stepItem.step}`\" @contextmenu=\"(e) => openMenuContext(e, index)\">\n                <v-stepper-step\n                  :step=\"stepItem.step\"\n                  :edit-icon=\"'mdi-puzzle-edit-outline'\"\n                  complete\n                  editable\n                >{{ stepItem.name }}</v-stepper-step>\n              </div>\n\n              <v-stepper-content :key=\"`stepper-content-${stepItem.step}`\" :step=\"stepItem.step\">\n                <v-container fluid class=\"pa-0\">\n                  <v-text-field\n                    class=\"mt-2\"\n                    label=\"Step name\"\n                    v-model=\"stepItem.name\"\n                    append-icon=\"mdi-square-edit-outline\"\n                    outlined\n                    dense\n                  />\n                  <v-combobox\n                    label=\"Action\"\n                    v-model=\"stepItem.action\"\n                    :items=\"actionLists\"\n                    dense\n                    hide-details\n                    outlined\n                  >\n                    <template v-slot:selection=\"{ item }\">\n                      <span class=\"pr-2\">{{ actionTextLists[item] }}</span>\n                    </template>\n                    <template v-slot:item=\"{ item }\">\n                      <span class=\"pr-2\">{{ actionTextLists[item] }}</span>\n                    </template>\n                  </v-combobox>\n                </v-container>\n              </v-stepper-content>\n            </template>\n            <div @contextmenu=\"(e) => e.preventDefault()\">\n              <v-stepper-step\n                :step=\"-1\"\n                edit-icon=\"mdi-plus\"\n                complete\n                editable\n                @click=\"addLastStep\"\n              />\n            </div>\n          </v-stepper>\n        </v-col>\n      </v-row>\n      <v-row>\n        <v-spacer />\n        <v-col cols=\"auto\" class=\"px-6\">\n          <v-btn depressed color=\"primary\" v-text=\"'Save'\" @click=\"onSave\" />\n        </v-col>\n      </v-row>\n    </v-container>\n\n    <v-menu v-model=\"isShowMenu\" :position-x=\"menuX\" :position-y=\"menuY\" absolute offset-y>\n      <v-list>\n        <v-list-item @click=\"addAboveStep\">\n          <v-list-item-icon>\n            <v-icon>mdi-plus</v-icon>\n          </v-list-item-icon>\n          <v-list-item-title v-text=\"'Above'\" />\n        </v-list-item>\n        <v-list-item @click=\"addBelowStep\">\n          <v-list-item-icon>\n            <v-icon>mdi-plus</v-icon>\n          </v-list-item-icon>\n          <v-list-item-title v-text=\"'Below'\" />\n        </v-list-item>\n        <v-list-item @click=\"deleteStep\">\n          <v-list-item-icon>\n            <v-icon>mdi-delete</v-icon>\n          </v-list-item-icon>\n          <v-list-item-title v-text=\"'Delete'\" />\n        </v-list-item>\n      </v-list>\n    </v-menu>\n  </v-navigation-drawer>\n</template>\n\n<script>\nimport { createNamespacedHelpers } from \"vuex\";\nimport { uuid } from \"vue-uuid\";\nimport * as AgvActionType from \"@/services/agvr/agv-action-type\";\n\nconst {\n  mapState: agvJobsMapState,\n  mapActions: agvJobsMapActions,\n} = createNamespacedHelpers(\"agvJobs\");\nconst {\n  mapState: navigationMapState,\n  mapActions: navigationMapActions,\n} = createNamespacedHelpers(\"navigation\");\nconst { mapState: agvMapsMapState } = createNamespacedHelpers(\"agvMaps\");\n\nexport default {\n  name: \"AgvrActionManagement\",\n  props: {\n    jobId: {\n      type: String,\n      default: \"\",\n    },\n    taskId: {\n      type: String,\n      default: \"\",\n    },\n  },\n  data() {\n    return {\n      step: -1,\n      actionLists: [\n        AgvActionType.FLOAT,\n        AgvActionType.CHARGING_IN,\n        AgvActionType.CHARGING_OUT,\n        AgvActionType.LIFT_IN,\n        AgvActionType.LIFT_UP,\n        AgvActionType.LIFT_DOWN,\n        AgvActionType.LIFT_OUT,\n      ],\n      actionTextLists: {\n        [AgvActionType.FLOAT]: \"Do nothing\",\n        [AgvActionType.CHARGING_IN]: \"Charging start\",\n        [AgvActionType.CHARGING_OUT]: \"Charging end\",\n        [AgvActionType.LIFT_IN]: \"Lift in\",\n        [AgvActionType.LIFT_UP]: \"Lift up\",\n        [AgvActionType.LIFT_DOWN]: \"Lift down\",\n        [AgvActionType.LIFT_OUT]: \"Lift out\",\n      },\n      tmpPositionX: 0,\n      tmpPositionY: 0,\n      tmpAngleZ: 0,\n      actionCollection: [],\n      isShowMenu: false,\n      menuX: 0,\n      menuY: 0,\n      selectedStep: -1,\n    };\n  },\n  methods: {\n    ...navigationMapActions({\n      navigationShowActionManagement: \"showActionManagement\",\n      navigationHideActionManagement: \"hideActionManagement\",\n    }),\n    ...agvJobsMapActions({\n      updateActions: \"updateActions\",\n    }),\n    openMenuContext(e, step) {\n      this.selectedStep = step;\n      e.preventDefault();\n      this.isShowMenu = false;\n      this.menuX = e.clientX;\n      this.menuY = e.clientY;\n      this.$nextTick(() => {\n        this.isShowMenu = true;\n      });\n    },\n    addAboveStep() {\n      if (this.selectedStep < 0) return;\n      this.actionCollection.splice(this.selectedStep, 0, {\n        step: uuid.v4(),\n        name: \"New step\",\n        action: this.actionLists[0],\n      });\n    },\n    addBelowStep() {\n      if (this.selectedStep < 0) return;\n      this.actionCollection.splice(this.selectedStep + 1, 0, {\n        step: uuid.v4(),\n        name: \"New step\",\n        action: this.actionLists[0],\n      });\n    },\n    deleteStep() {\n      if (this.selectedStep < 0) return;\n      this.actionCollection.splice(this.selectedStep, 1);\n      this.step = -1;\n    },\n    addLastStep() {\n      this.actionCollection.push({\n        step: uuid.v4(),\n        name: \"New step\",\n        action: this.actionLists[0],\n      });\n    },\n    onSave() {\n      this.updateActions({\n        jobId: this.jobId,\n        taskId: this.taskId,\n        actions: this.actionCollection,\n        position: {\n          x:\n            ((parseFloat(this.tmpPositionX) -\n              this.agvRosMapInfo.origin.position.x) *\n              this.agvMapScale) /\n            this.agvRosMapInfo.resolution,\n          y:\n            ((this.agvRosMapInfo.origin.position.y -\n              parseFloat(this.tmpPositionY)) /\n              this.agvRosMapInfo.resolution +\n              this.agvRosMapInfo.height) *\n            this.agvMapScale,\n          z: 0,\n        },\n        thetaEnd: parseFloat(this.tmpAngleZ),\n      });\n    },\n  },\n  computed: {\n    ...navigationMapState({\n      navigationActionManagementShow: (state) => state.actionManagement.isShow,\n      navigationMapId: (state) => state.mapId,\n    }),\n    ...agvMapsMapState({\n      agvMapScale(state) {\n        let map = state.find((m) => m.id === this.navigationMapId);\n        return map != null ? map.webMap.scale : 1;\n      },\n      agvRosMapInfo(state) {\n        let map = state.find((m) => m.id === this.navigationMapId);\n        return map.rosMap.info;\n      },\n    }),\n    ...agvJobsMapState({\n      agvSelectedTask(state) {\n        let job = state.find((j) => j.id === this.jobId);\n        if (job == null) return null;\n        return job.tasks.find((t) => t.id === this.taskId);\n      },\n    }),\n    isShow: {\n      get() {\n        return this.navigationActionManagementShow;\n      },\n      set(val) {\n        if (val) {\n          this.navigationShowActionManagement();\n        } else {\n          this.navigationHideActionManagement();\n        }\n      },\n    },\n    positionX: {\n      get() {\n        if (\n          this.agvSelectedTask == null ||\n          this.agvRosMapInfo == null ||\n          this.agvMapScale == null\n        )\n          return 0;\n        return (\n          this.agvRosMapInfo.origin.position.x +\n          (this.agvSelectedTask.position.x * this.agvRosMapInfo.resolution) /\n            this.agvMapScale\n        ).toFixed(2);\n      },\n      set(val) {\n        this.tmpPositionX = val;\n      },\n    },\n    positionY: {\n      get() {\n        if (\n          this.agvSelectedTask == null ||\n          this.agvRosMapInfo == null ||\n          this.agvMapScale == null\n        )\n          return 0;\n\n        \n        return (\n          this.agvRosMapInfo.origin.position.y -\n          (this.agvSelectedTask.position.y / this.agvMapScale -\n            this.agvRosMapInfo.height) *\n            this.agvRosMapInfo.resolution\n        ).toFixed(2);\n      },\n      set(val) {\n        this.tmpPositionY = val;\n      },\n    },\n    thetaEnd: {\n      get: function () {\n        if (this.agvSelectedTask == null) return 0;\n        return this.agvSelectedTask.thetaEnd.toFixed(0);\n      },\n      set: function (val) {\n        this.tmpAngleZ = val;\n      },\n    },\n  },\n  watch: {\n    isShowMenu(val) {\n      if (val == false) this.selectedStep = -1;\n    },\n    isShow(val) {\n      if (val) {\n        this.tmpPositionX = this.positionX;\n        this.tmpPositionY = this.positionY;\n        this.tmpAngleZ = this.thetaEnd;\n        this.actionCollection = this.agvSelectedTask != null ? this.agvSelectedTask.actions : [];\n      }\n    },\n  },\n  mounted() {\n    this.tmpPositionX = this.positionX;\n    this.tmpPositionY = this.positionY;\n    this.tmpAngleZ = this.thetaEnd;\n    this.actionCollection = this.agvSelectedTask != null ? this.agvSelectedTask.actions : [];\n  },\n};\n</script>\n\n<style scoped>\n.action-management-stepper {\n  box-shadow: none;\n}\n</style>\n"]}]}