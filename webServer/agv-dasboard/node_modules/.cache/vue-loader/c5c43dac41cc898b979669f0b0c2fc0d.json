{"remainingRequest":"/home/robotics/AnhNV/agv-dasboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/robotics/AnhNV/agv-dasboard/src/components/AgvNavigation/AgvInitializeNavigation/AgvInitializeNavigation.vue?vue&type=style&index=0&id=ef7ac664&scoped=true&lang=css&","dependencies":[{"path":"/home/robotics/AnhNV/agv-dasboard/src/components/AgvNavigation/AgvInitializeNavigation/AgvInitializeNavigation.vue","mtime":1609149479952},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/css-loader/dist/cjs.js","mtime":1602053620867},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1602053621134},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/postcss-loader/src/index.js","mtime":1602053621090},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/cache-loader/dist/cjs.js","mtime":1602053610278},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/vue-loader/lib/index.js","mtime":1602053621134}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5wYW56b29tLW1hcC1pbml0aWFsaXplLXBvc2Utdmlld2VyIHsKICBib3JkZXI6IG5vbmU7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlOwp9Cg=="},{"version":3,"sources":["AgvInitializeNavigation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8LA;AACA;AACA;AACA;AACA","file":"AgvInitializeNavigation.vue","sourceRoot":"src/components/AgvNavigation/AgvInitializeNavigation","sourcesContent":["<template>\n  <v-container fluid class=\"pa-0 agv-navigation\">\n    <panZoom\n      class=\"panzoom-map-initialize-pose-viewer\"\n      :selector=\"`#${graphicID}`\"\n      :options=\"{\n        minZoom: 0.1,\n        maxZoom: 5,\n        zoomSpeed: 0.05,\n        zoomDoubleClickSpeed: 1,\n        onDoubleClick: onPanZoomDoubleClick,\n        autocenter: true,\n      }\"\n      @init=\"onInitZoomPan\"\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        class=\"map-viewer-svg\"\n        :height=\"(agvMapImage == null || viewHeight > agvMapImage.height) ? viewHeight : agvMapImage.height\"\n        :width=\"(agvMapImage == null || viewWidth > agvMapImage.width) ? viewWidth : agvMapImage.width\"\n        :id=\"graphicID\"\n        @mousemove=\"onMouseMove\"\n        @contextmenu=\"onContextMenu\"\n      >\n        <g\n          @touchstart=\"onTouchStart\"\n          @touchmove=\"onTouchMove\"\n          @touchend=\"onTouchEnd\"\n        >\n          <AgvrMapImage :mapId=\"navigationMapId\" />\n          <AgvrRobotDirection :agvId=\"navigationAgvId\" />\n          <AgvrRobot\n            :selectable=\"true\"\n            :agvId=\"navigationAgvId\"\n            :agvMapResolution=\"agvMapResolution\"\n            :agvMapScale=\"agvMapScale\"\n          />\n        </g>\n      </svg>\n    </panZoom>\n    <AgvrRobotInitPoseMenuContext />\n  </v-container>\n</template>\n<script>\nimport { createNamespacedHelpers, mapState } from \"vuex\";\nimport { uuid } from \"vue-uuid\";\nimport AgvrMapImage from \"@/components/AgvrMapImage\";\nimport AgvrRobot from \"@/components/AgvrRobot\";\nimport AgvrRobotDirection from \"@/components/AgvrRobotDirection\";\nimport {\n  AgvrRobotInitPoseMenuContext,\n} from \"@/components/MenuContexts\";\n\nconst { mapState: navigationMapState } = createNamespacedHelpers(\"navigation\");\nconst { mapState: agvMapsMapState } = createNamespacedHelpers(\"agvMaps\");\nconst { mapActions: agvsMapActions } = createNamespacedHelpers(\"agvs\");\n\nexport default {\n  name: \"AgvInitializeNavigation\",\n  components: {\n    AgvrRobot,\n    AgvrRobotDirection,\n    AgvrMapImage,\n    AgvrRobotInitPoseMenuContext,\n  },\n  data() {\n    return {\n      graphicID: `agv-map-zoompan-initialize-pose-${uuid.v4()}`,\n      panZoom: null,\n      touchClientX: -1,\n      touchClientY: -1,\n      sgvWidth: 0,\n      sgvHeight: 0,\n    };\n  },\n  computed: {\n    ...navigationMapState({\n      navigationMapId: (state) => state.mapId,\n      navigationAgvId: (state) => state.agvId,\n    }),\n    ...agvMapsMapState({\n      agvMapImage(state) {\n        let map = state.find((m) => m.id === this.navigationMapId);\n        return map != null ? map.webMap.Image : null;\n      },\n      agvMapResolution(state) {\n        let map = state.find((m) => m.id === this.navigationMapId);\n        return map != null ? map.rosMap.info.resolution : 1;\n      },\n      agvMapScale(state) {\n        let map = state.find((m) => m.id === this.navigationMapId);\n        return map != null ? map.webMap.scale : 1;\n      },\n    }),\n    ...mapState({\n      navigationWebMap: (state) =>\n        state.ros.maps[state.navigation.selectedMapId].webMap,\n      viewWidth: (state) => state.navigation.viewWidth,\n      viewHeight: (state) => state.navigation.viewHeight,\n      navigationSelectionType: (state) => state.navigation.selectionType,\n      navigationMapPanZoomEnable: (state) => state.navigation.mapPanZoomEnable,\n    }),\n  },\n  methods: {\n    ...agvsMapActions({\n      moveAgvPosition: \"moveAgvPosition\",\n      changeAgvDirection: \"changeAgvDirection\",\n    }),\n    onInitZoomPan(e) {\n      this.panZoom = e;\n    },\n    onMouseMove(e) {\n      let transform = this.panZoom.getTransform();\n      switch (this.navigationSelectionType) {\n        case 3:\n          this.moveAgvPosition({\n            movementX: e.movementX / transform.scale,\n            movementY: e.movementY / transform.scale,\n            agvId: this.navigationAgvId,\n          });\n          break;\n        case 4:\n          this.changeAgvDirection({\n            mouse: {\n              x: (e.layerX - transform.x) / transform.scale,\n              y: (e.layerY - transform.y) / transform.scale,\n            },\n            agvId: this.navigationAgvId,\n          });\n          break;\n      }\n    },\n    onTouchStart(e) {\n      let touch = e.changedTouches[0];\n      this.touchClientX = touch.clientX;\n      this.touchClientY = touch.clientY;\n    },\n    onTouchEnd() {\n      this.touchClientX = -1;\n      this.touchClientY = -1;\n    },\n    onTouchMove(e) {\n      e.preventDefault();\n      if (this.touchClientX > 0 && this.touchClientY > 0) {\n        let touch = e.changedTouches[0];\n        this.onMouseMove({\n          movementX: touch.clientX - this.touchClientX,\n          movementY: touch.clientY - this.touchClientY,\n          layerX: touch.clientX,\n          layerY: touch.clientY,\n        });\n\n        this.touchClientX = touch.clientX;\n        this.touchClientY = touch.clientY;\n      }\n    },\n    onContextMenu(e) {\n      e.preventDefault();\n      e.stopPropagation();\n    },\n    onPanZoomDoubleClick() {},\n  },\n  watch: {\n    navigationMapPanZoomEnable(val) {\n      if (val) {\n        if (this.panZoom.isPaused()) {\n          this.panZoom.resume();\n        }\n      } else {\n        if (!this.panZoom.isPaused()) {\n          this.panZoom.pause();\n        }\n      }\n    },\n    agvMapImage(val) {\n      if (val == null) return;\n      this.sgvWidth = val.width;\n      this.sgvHeight = val.height;\n    },\n  },\n  mounted() {\n    if (this.agvMapImage != null) {\n      this.sgvWidth = this.agvMapImage.width;\n      this.sgvHeight = this.agvMapImage.height;\n    }\n  },\n};\n</script>\n\n<style scoped>\n.panzoom-map-initialize-pose-viewer {\n  border: none;\n  width: 100%;\n  height: 100%;\n}\n</style>"]}]}