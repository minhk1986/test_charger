{"remainingRequest":"/home/robotics/AnhNV/agv-dasboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/robotics/AnhNV/agv-dasboard/src/components/AgvrTasksOnMap/AgvrTasksOnMap.vue?vue&type=style&index=0&id=6568ce6f&scoped=true&lang=css&","dependencies":[{"path":"/home/robotics/AnhNV/agv-dasboard/src/components/AgvrTasksOnMap/AgvrTasksOnMap.vue","mtime":1609149481208},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/css-loader/dist/cjs.js","mtime":1602053620867},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1602053621134},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/postcss-loader/src/index.js","mtime":1602053621090},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/cache-loader/dist/cjs.js","mtime":1602053610278},{"path":"/home/robotics/AnhNV/agv-dasboard/node_modules/vue-loader/lib/index.js","mtime":1602053621134}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmFndnItdGFzay1pbmRleC10ZXh0IHsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQo="},{"version":3,"sources":["AgvrTasksOnMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA;AACA;AACA","file":"AgvrTasksOnMap.vue","sourceRoot":"src/components/AgvrTasksOnMap","sourcesContent":["<template>\n  <g>\n    <circle\n      v-for=\"task in agvTasks\"\n      :key=\"`way-${jobId}-${task.id}`\"\n      :cx=\"task.position.x\"\n      :cy=\"task.position.y\"\n      r=\"12\"\n      stroke-width=\"3\"\n      :fill=\"task.id === navigationTaskId ? 'teal' : 'indigo'\"\n      @mousedown=\"() => onMouseDown(task.id)\"\n      @touchstart=\"() => onMouseDown(task.id)\"\n      @contextmenu=\"onContextMenu\"\n    />\n    <text\n      v-for=\"(task, index) in agvTasks\"\n      :key=\"`way-index-${jobId}-${task.id}`\"\n      :x=\"task.position.x\" \n      :y=\"task.position.y\" \n      text-anchor=\"middle\" \n      fill=\"white\"\n      stroke-width=\"1px\" \n      font-size=\"0.8em\"\n      class=\"agvr-task-index-text\"\n      dy=\"0.4em\" v-text=\"index\" />\n  </g>\n</template>\n\n<script>\nimport { createNamespacedHelpers } from \"vuex\";\nconst { mapState: agvJobsMapState } = createNamespacedHelpers(\"agvJobs\");\nconst { mapState: navigationMapState, mapActions: navigationMapActions } = createNamespacedHelpers(\"navigation\");\nexport default {\n  name: \"AgvrTasksOnMap\",\n  props: {\n    jobId: {\n      type: String,\n      default: \"\",\n    },\n  },\n  computed: {\n    ...navigationMapState({\n      navigationTaskId: (state) => state.taskId,\n      selectedIndexTask: (state) => state.selectedIndexTask,\n      isContextMenuShow: (state) => state.taskMenuContext.isShow || state.agvMenuContext.isShow || state.agvInitPoseMenuContext.isShow,\n    }),\n    ...agvJobsMapState({\n      agvTasks(state) {\n        let job = state.find((j) => j.id === this.jobId);\n        return job != null ? job.tasks : [];\n      },\n    }),\n  },\n  methods: {\n    ...navigationMapActions({\n      navigationSetSelectedTaskId: \"setSelectedTaskId\",\n      navigationShowTaskMenuContext: \"showTaskMenuContext\",\n      navigationDisableMapPanZoom: \"disableMapPanZoom\",\n      navigationSelectedTaskPosition: \"selectedTaskPosition\",\n    }),\n    onMouseDown(id) {\n      if (this.isContextMenuShow) return;\n      this.navigationDisableMapPanZoom();\n      this.navigationSelectedTaskPosition();\n      this.navigationSetSelectedTaskId(id);\n    },\n    onContextMenu(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.$nextTick(() => {\n        this.navigationShowTaskMenuContext({\n          x: e.clientX,\n          y: e.clientY,\n        });\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.agvr-task-index-text {\n  pointer-events: none;\n}\n</style>"]}]}